import argparse
import logging

from vortex.development.utils.parser import load_config, check_config
from vortex.runtime import model_runtime_map
from vortex.development.core.pipelines import IRValidationPipeline

description = "Vortex exported IR graph validation pipeline; successful runs will produce autogenerated reports"

logger = logging.getLogger(__name__)


def main(args):
    available_runtime = []
    for runtime_map in model_runtime_map.values():
        available_runtime.extend(list(runtime_map.keys()))
    available_runtime = set(available_runtime)
    for runtime in args.runtime:
        if runtime not in list(available_runtime):
            raise RuntimeError('Runtime "{}" is not available, available runtime = {}'.format(runtime,list(available_runtime)))

    # Parse config
    config = load_config(args.config)
    check_result = check_config(config, 'validate')
    logging.debug(check_result)
    if not check_result.valid:
        raise RuntimeError("invalid config : %s" % str(check_result))

    # Initialize IR validator

    validation_executor = IRValidationPipeline(config=config,
                                            model = args.model,
                                            backends = args.runtime,
                                            generate_report = True)
    eval_results = validation_executor.run(batch_size=args.batch_size)

    if 'pr_curves' in eval_results :
        eval_results.pop('pr_curves')
    print('validation results: {}'.format(
        ', '.join(['{}: {}'.format(key, value) for key, value in eval_results.items()])
    ))

def add_parser(subparsers, parent_parser):
    IR_VALIDATE_HELP = "run validation on IR model from configuration file"
    usage = "\n  vortex validate [options] <config> <model>"
    parser = subparsers.add_parser(
        "ir_runtime_validate",
        parents=[parent_parser],
        description=IR_VALIDATE_HELP,
        help=IR_VALIDATE_HELP,
        formatter_class=argparse.RawTextHelpFormatter,
        usage=usage
    )

    parser.add_argument("config", help='path to experiment config')
    parser.add_argument("model", help='path to IR model')

    cmd_args_group = parser.add_argument_group(title="command arguments")
    cmd_args_group.add_argument(
        "-r", "--runtime",
        nargs="*",
        type=str, default=['cpu'], 
        help='runtime device/backend, multiple values are possible'
    )
    cmd_args_group.add_argument(
        "-b", "--batch-size", 
        type=int, 
        help="batch size for validation, this value must match with exported model batch size"
    )

    parser.set_defaults(func=main)
